
Led_Animation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000468  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001103  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074f  00000000  00000000  000016eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008ff  00000000  00000000  00001e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  0000273c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053f  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ea2  00000000  00000000  00002da7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003c49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 40 00 	call	0x80	; 0x80 <main>
  64:	0c 94 32 02 	jmp	0x464	; 0x464 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <HLED_u8InitLedString>:
 *			     (0) means no error,(1) means Undefined PORT Argument
 */
u8 HLED_u8InitLedString(u8 Copy_u8Reg)
{
	/*initialize desired port  as output and return error value*/
	return MDIO_u8SetDirectionReg(Copy_u8Reg,MDIO_OUTPUT);
  6c:	61 e0       	ldi	r22, 0x01	; 1
  6e:	0e 94 76 01 	call	0x2ec	; 0x2ec <MDIO_u8SetDirectionReg>

}/*end of HLED_u8InitLedString*/
  72:	08 95       	ret

00000074 <HLED_u8LedOnOff>:
 *			     (0) means no error,(1) means Undefined PORT Argument, (2) means Bit number out of range, (3) means Bit value out of range
 */
u8 HLED_u8LedOnOff(u8 Copy_u8Reg,u8 Copy_u8Bit,u8 Copy_u8State)
{
	/*write led value on desired bit and return error value*/
	return MDIO_u8WriteBit(Copy_u8Reg,Copy_u8Bit,Copy_u8State);
  74:	0e 94 ae 01 	call	0x35c	; 0x35c <MDIO_u8WriteBit>

}/*end of HLED_u8LedOnOff*/
  78:	08 95       	ret

0000007a <HLED_u8LedStringOnOff>:
 *			     (0) means no error,(1) means Undefined PORT Argument
 */
u8 HLED_u8LedStringOnOff(u8 Copy_u8Reg,u8 Copy_u8Value)
{
	/*write led values on Register and return error value*/
	return MDIO_u8WriteReg(Copy_u8Reg,Copy_u8Value);
  7a:	0e 94 92 01 	call	0x324	; 0x324 <MDIO_u8WriteReg>

  7e:	08 95       	ret

00000080 <main>:
#include <util/delay.h>

int main(void)
{
	/*initialize led string off*/
	HLED_u8InitLedString(MDIO_PORTA);
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	0e 94 36 00 	call	0x6c	; 0x6c <HLED_u8InitLedString>
	HLED_u8LedStringOnOff(MDIO_PORTA,HLED_OFF);
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	0e 94 3d 00 	call	0x7a	; 0x7a <HLED_u8LedStringOnOff>
		
		/*Second animation*/
		u8 string = 129;  
		for (u8 i=0;i<8;i++)
		{
			HLED_u8LedStringOnOff( MDIO_PORTA, ((string>>i) | (string<<i)) );
  8e:	0f 2e       	mov	r0, r31
  90:	f1 e8       	ldi	r31, 0x81	; 129
  92:	cf 2e       	mov	r12, r31
  94:	d1 2c       	mov	r13, r1
  96:	f0 2d       	mov	r31, r0
		
		/*Third animation*/
		string = 102;
		for (u8 i=0;i<8;i++)
		{
			HLED_u8LedStringOnOff( MDIO_PORTA, ((string>>i) | (string<<i)) );
  98:	0f 2e       	mov	r0, r31
  9a:	f6 e6       	ldi	r31, 0x66	; 102
  9c:	ef 2e       	mov	r14, r31
  9e:	f1 2c       	mov	r15, r1
  a0:	f0 2d       	mov	r31, r0
		
		/*4th animation*/
		string = 153;
		for (u8 i=0;i<8;i++)
		{
			HLED_u8LedStringOnOff( MDIO_PORTA, ((string>>i) | (string<<i)) );
  a2:	09 e9       	ldi	r16, 0x99	; 153
  a4:	10 e0       	ldi	r17, 0x00	; 0
	/*while loop*/
	while (1)
	{
		
		/*first animation*/
		for (u8 i=0;i<8;i++)
  a6:	c0 e0       	ldi	r28, 0x00	; 0
		{
			HLED_u8LedOnOff(MDIO_PORTA,i,HLED_ON);
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	6c 2f       	mov	r22, r28
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 3a 00 	call	0x74	; 0x74 <HLED_u8LedOnOff>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	84 e3       	ldi	r24, 0x34	; 52
  b6:	9c e0       	ldi	r25, 0x0C	; 12
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x38>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x42>
  c2:	00 00       	nop
			_delay_ms(500);
			HLED_u8LedOnOff(MDIO_PORTA,i,HLED_OFF);
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	6c 2f       	mov	r22, r28
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 3a 00 	call	0x74	; 0x74 <HLED_u8LedOnOff>
  ce:	2f e7       	ldi	r18, 0x7F	; 127
  d0:	88 e3       	ldi	r24, 0x38	; 56
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x54>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x5e>
  de:	00 00       	nop
	/*while loop*/
	while (1)
	{
		
		/*first animation*/
		for (u8 i=0;i<8;i++)
  e0:	cf 5f       	subi	r28, 0xFF	; 255
  e2:	c8 30       	cpi	r28, 0x08	; 8
  e4:	09 f7       	brne	.-62     	; 0xa8 <main+0x28>
			HLED_u8LedOnOff(MDIO_PORTA,i,HLED_OFF);
			_delay_ms(50);
		}
		
		/*turn all string on for a second then turn it off*/
		HLED_u8LedStringOnOff(MDIO_PORTA,HLED_ON);
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 3d 00 	call	0x7a	; 0x7a <HLED_u8LedStringOnOff>
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	89 e6       	ldi	r24, 0x69	; 105
  f2:	98 e1       	ldi	r25, 0x18	; 24
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x74>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x7e>
  fe:	00 00       	nop
		_delay_ms(1000);
		HLED_u8LedStringOnOff(MDIO_PORTA,HLED_OFF);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	0e 94 3d 00 	call	0x7a	; 0x7a <HLED_u8LedStringOnOff>
 108:	2f e7       	ldi	r18, 0x7F	; 127
 10a:	88 e3       	ldi	r24, 0x38	; 56
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x8e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x98>
 118:	00 00       	nop
 11a:	c0 e0       	ldi	r28, 0x00	; 0
 11c:	d0 e0       	ldi	r29, 0x00	; 0
		
		/*Second animation*/
		u8 string = 129;  
		for (u8 i=0;i<8;i++)
		{
			HLED_u8LedStringOnOff( MDIO_PORTA, ((string>>i) | (string<<i)) );
 11e:	b6 01       	movw	r22, r12
 120:	0c 2e       	mov	r0, r28
 122:	02 c0       	rjmp	.+4      	; 0x128 <main+0xa8>
 124:	75 95       	asr	r23
 126:	67 95       	ror	r22
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <main+0xa4>
 12c:	c6 01       	movw	r24, r12
 12e:	0c 2e       	mov	r0, r28
 130:	02 c0       	rjmp	.+4      	; 0x136 <main+0xb6>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <main+0xb2>
 13a:	68 2b       	or	r22, r24
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 3d 00 	call	0x7a	; 0x7a <HLED_u8LedStringOnOff>
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	94 e3       	ldi	r25, 0x34	; 52
 146:	2c e0       	ldi	r18, 0x0C	; 12
 148:	81 50       	subi	r24, 0x01	; 1
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	20 40       	sbci	r18, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0xc8>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0xd2>
 152:	00 00       	nop
 154:	21 96       	adiw	r28, 0x01	; 1
		
		
		
		/*Second animation*/
		u8 string = 129;  
		for (u8 i=0;i<8;i++)
 156:	c8 30       	cpi	r28, 0x08	; 8
 158:	d1 05       	cpc	r29, r1
 15a:	09 f7       	brne	.-62     	; 0x11e <main+0x9e>
			HLED_u8LedStringOnOff( MDIO_PORTA, ((string>>i) | (string<<i)) );
			_delay_ms(500);
		}
		
		/*turn all string on for a second then turn it off*/
		HLED_u8LedStringOnOff(MDIO_PORTA,HLED_ON);
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 3d 00 	call	0x7a	; 0x7a <HLED_u8LedStringOnOff>
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	99 e6       	ldi	r25, 0x69	; 105
 168:	28 e1       	ldi	r18, 0x18	; 24
 16a:	81 50       	subi	r24, 0x01	; 1
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	20 40       	sbci	r18, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0xea>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0xf4>
 174:	00 00       	nop
		_delay_ms(1000);
		HLED_u8LedStringOnOff(MDIO_PORTA,HLED_OFF);
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 3d 00 	call	0x7a	; 0x7a <HLED_u8LedStringOnOff>
 17e:	8f e7       	ldi	r24, 0x7F	; 127
 180:	98 e3       	ldi	r25, 0x38	; 56
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	81 50       	subi	r24, 0x01	; 1
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	20 40       	sbci	r18, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x104>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x10e>
 18e:	00 00       	nop
 190:	c0 e0       	ldi	r28, 0x00	; 0
 192:	d0 e0       	ldi	r29, 0x00	; 0
		
		/*Third animation*/
		string = 102;
		for (u8 i=0;i<8;i++)
		{
			HLED_u8LedStringOnOff( MDIO_PORTA, ((string>>i) | (string<<i)) );
 194:	b7 01       	movw	r22, r14
 196:	0c 2e       	mov	r0, r28
 198:	02 c0       	rjmp	.+4      	; 0x19e <main+0x11e>
 19a:	75 95       	asr	r23
 19c:	67 95       	ror	r22
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <main+0x11a>
 1a2:	c7 01       	movw	r24, r14
 1a4:	0c 2e       	mov	r0, r28
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <main+0x12c>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <main+0x128>
 1b0:	68 2b       	or	r22, r24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 3d 00 	call	0x7a	; 0x7a <HLED_u8LedStringOnOff>
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	94 e3       	ldi	r25, 0x34	; 52
 1bc:	2c e0       	ldi	r18, 0x0C	; 12
 1be:	81 50       	subi	r24, 0x01	; 1
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	20 40       	sbci	r18, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x13e>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x148>
 1c8:	00 00       	nop
 1ca:	21 96       	adiw	r28, 0x01	; 1
		HLED_u8LedStringOnOff(MDIO_PORTA,HLED_OFF);
		_delay_ms(50);		
		
		/*Third animation*/
		string = 102;
		for (u8 i=0;i<8;i++)
 1cc:	c8 30       	cpi	r28, 0x08	; 8
 1ce:	d1 05       	cpc	r29, r1
 1d0:	09 f7       	brne	.-62     	; 0x194 <main+0x114>
			HLED_u8LedStringOnOff( MDIO_PORTA, ((string>>i) | (string<<i)) );
			_delay_ms(500);
		}
		
		/*turn all string on for a second then turn it off*/
		HLED_u8LedStringOnOff(MDIO_PORTA,HLED_ON);
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 3d 00 	call	0x7a	; 0x7a <HLED_u8LedStringOnOff>
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	99 e6       	ldi	r25, 0x69	; 105
 1de:	28 e1       	ldi	r18, 0x18	; 24
 1e0:	81 50       	subi	r24, 0x01	; 1
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	20 40       	sbci	r18, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0x160>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x16a>
 1ea:	00 00       	nop
		_delay_ms(1000);
		HLED_u8LedStringOnOff(MDIO_PORTA,HLED_OFF);
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 3d 00 	call	0x7a	; 0x7a <HLED_u8LedStringOnOff>
 1f4:	8f e7       	ldi	r24, 0x7F	; 127
 1f6:	98 e3       	ldi	r25, 0x38	; 56
 1f8:	21 e0       	ldi	r18, 0x01	; 1
 1fa:	81 50       	subi	r24, 0x01	; 1
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	20 40       	sbci	r18, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <main+0x17a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0x184>
 204:	00 00       	nop
 206:	c0 e0       	ldi	r28, 0x00	; 0
 208:	d0 e0       	ldi	r29, 0x00	; 0
		
		/*4th animation*/
		string = 153;
		for (u8 i=0;i<8;i++)
		{
			HLED_u8LedStringOnOff( MDIO_PORTA, ((string>>i) | (string<<i)) );
 20a:	b8 01       	movw	r22, r16
 20c:	0c 2e       	mov	r0, r28
 20e:	02 c0       	rjmp	.+4      	; 0x214 <main+0x194>
 210:	75 95       	asr	r23
 212:	67 95       	ror	r22
 214:	0a 94       	dec	r0
 216:	e2 f7       	brpl	.-8      	; 0x210 <main+0x190>
 218:	c8 01       	movw	r24, r16
 21a:	0c 2e       	mov	r0, r28
 21c:	02 c0       	rjmp	.+4      	; 0x222 <main+0x1a2>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <main+0x19e>
 226:	68 2b       	or	r22, r24
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 3d 00 	call	0x7a	; 0x7a <HLED_u8LedStringOnOff>
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	94 e3       	ldi	r25, 0x34	; 52
 232:	2c e0       	ldi	r18, 0x0C	; 12
 234:	81 50       	subi	r24, 0x01	; 1
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	20 40       	sbci	r18, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <main+0x1b4>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x1be>
 23e:	00 00       	nop
 240:	21 96       	adiw	r28, 0x01	; 1
		HLED_u8LedStringOnOff(MDIO_PORTA,HLED_OFF);
		_delay_ms(50);
		
		/*4th animation*/
		string = 153;
		for (u8 i=0;i<8;i++)
 242:	c8 30       	cpi	r28, 0x08	; 8
 244:	d1 05       	cpc	r29, r1
 246:	09 f7       	brne	.-62     	; 0x20a <main+0x18a>
			HLED_u8LedStringOnOff( MDIO_PORTA, ((string>>i) | (string<<i)) );
			_delay_ms(500);
		}
		
		/*turn all string on for a second then turn it off*/
		HLED_u8LedStringOnOff(MDIO_PORTA,HLED_ON);
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 3d 00 	call	0x7a	; 0x7a <HLED_u8LedStringOnOff>
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	99 e6       	ldi	r25, 0x69	; 105
 254:	28 e1       	ldi	r18, 0x18	; 24
 256:	81 50       	subi	r24, 0x01	; 1
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	20 40       	sbci	r18, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x1d6>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x1e0>
 260:	00 00       	nop
		_delay_ms(1000);
		HLED_u8LedStringOnOff(MDIO_PORTA,HLED_OFF);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 3d 00 	call	0x7a	; 0x7a <HLED_u8LedStringOnOff>
 26a:	8f e7       	ldi	r24, 0x7F	; 127
 26c:	98 e3       	ldi	r25, 0x38	; 56
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	81 50       	subi	r24, 0x01	; 1
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	20 40       	sbci	r18, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0x1f0>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x1fa>
 27a:	00 00       	nop
 27c:	c4 e0       	ldi	r28, 0x04	; 4
		_delay_ms(50);
		
		/*5th animation*/
		for (u8 i=0;i<4;i++)
		{
			HLED_u8LedStringOnOff( MDIO_PORTA,0xAA);
 27e:	6a ea       	ldi	r22, 0xAA	; 170
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 3d 00 	call	0x7a	; 0x7a <HLED_u8LedStringOnOff>
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	94 e3       	ldi	r25, 0x34	; 52
 28a:	2c e0       	ldi	r18, 0x0C	; 12
 28c:	81 50       	subi	r24, 0x01	; 1
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	20 40       	sbci	r18, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x20c>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x216>
 296:	00 00       	nop
			_delay_ms(500);
			HLED_u8LedStringOnOff( MDIO_PORTA,0x55);
 298:	65 e5       	ldi	r22, 0x55	; 85
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 3d 00 	call	0x7a	; 0x7a <HLED_u8LedStringOnOff>
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	94 e3       	ldi	r25, 0x34	; 52
 2a4:	2c e0       	ldi	r18, 0x0C	; 12
 2a6:	81 50       	subi	r24, 0x01	; 1
 2a8:	90 40       	sbci	r25, 0x00	; 0
 2aa:	20 40       	sbci	r18, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <main+0x226>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0x230>
 2b0:	00 00       	nop
 2b2:	c1 50       	subi	r28, 0x01	; 1
		_delay_ms(1000);
		HLED_u8LedStringOnOff(MDIO_PORTA,HLED_OFF);
		_delay_ms(50);
		
		/*5th animation*/
		for (u8 i=0;i<4;i++)
 2b4:	21 f7       	brne	.-56     	; 0x27e <main+0x1fe>
			HLED_u8LedStringOnOff( MDIO_PORTA,0x55);
			_delay_ms(500);
		}
		
		/*turn all string on for a second then turn it off*/
		HLED_u8LedStringOnOff(MDIO_PORTA,HLED_ON);
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 3d 00 	call	0x7a	; 0x7a <HLED_u8LedStringOnOff>
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	99 e6       	ldi	r25, 0x69	; 105
 2c2:	28 e1       	ldi	r18, 0x18	; 24
 2c4:	81 50       	subi	r24, 0x01	; 1
 2c6:	90 40       	sbci	r25, 0x00	; 0
 2c8:	20 40       	sbci	r18, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <main+0x244>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <main+0x24e>
 2ce:	00 00       	nop
		_delay_ms(1000);
		HLED_u8LedStringOnOff(MDIO_PORTA,HLED_OFF);
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 3d 00 	call	0x7a	; 0x7a <HLED_u8LedStringOnOff>
 2d8:	8f e7       	ldi	r24, 0x7F	; 127
 2da:	98 e3       	ldi	r25, 0x38	; 56
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	81 50       	subi	r24, 0x01	; 1
 2e0:	90 40       	sbci	r25, 0x00	; 0
 2e2:	20 40       	sbci	r18, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <main+0x25e>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <main+0x268>
 2e8:	00 00       	nop
 2ea:	dd ce       	rjmp	.-582    	; 0xa6 <main+0x26>

000002ec <MDIO_u8SetDirectionReg>:
		/*Report Bit number out of range error*/
		return 2;

	}/*end of bit number check condition*/ 

}/*end of MDIO_u8SetDirectionBit()*/
 2ec:	61 30       	cpi	r22, 0x01	; 1
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <MDIO_u8SetDirectionReg+0x6>
 2f0:	6f ef       	ldi	r22, 0xFF	; 255
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	61 f0       	breq	.+24     	; 0x30e <MDIO_u8SetDirectionReg+0x22>
 2f6:	18 f4       	brcc	.+6      	; 0x2fe <MDIO_u8SetDirectionReg+0x12>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	31 f0       	breq	.+12     	; 0x308 <MDIO_u8SetDirectionReg+0x1c>
 2fc:	11 c0       	rjmp	.+34     	; 0x320 <MDIO_u8SetDirectionReg+0x34>
 2fe:	83 30       	cpi	r24, 0x03	; 3
 300:	49 f0       	breq	.+18     	; 0x314 <MDIO_u8SetDirectionReg+0x28>
 302:	84 30       	cpi	r24, 0x04	; 4
 304:	51 f0       	breq	.+20     	; 0x31a <MDIO_u8SetDirectionReg+0x2e>
 306:	0c c0       	rjmp	.+24     	; 0x320 <MDIO_u8SetDirectionReg+0x34>
 308:	6a bb       	out	0x1a, r22	; 26
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	08 95       	ret
 30e:	67 bb       	out	0x17, r22	; 23
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	08 95       	ret
 314:	64 bb       	out	0x14, r22	; 20
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	08 95       	ret
 31a:	61 bb       	out	0x11, r22	; 17
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	08 95       	ret
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	08 95       	ret

00000324 <MDIO_u8WriteReg>:
u8 MDIO_u8WriteReg(u8 Copy_u8Reg,u8 Copy_u8Value)
{
	u8 Local_u8RegValue = 0;
	
	/*value type check condition*/
	if (Copy_u8Value==MDIO_HIGH)
 324:	61 30       	cpi	r22, 0x01	; 1
 326:	09 f4       	brne	.+2      	; 0x32a <MDIO_u8WriteReg+0x6>
	{
		/*set the whle reg hight*/
		Local_u8RegValue = 0xff;
 328:	6f ef       	ldi	r22, 0xFF	; 255
		Local_u8RegValue = Copy_u8Value;

	}/*end of value type check condition*/

	/*register switch case*/
	switch (Copy_u8Reg)
 32a:	82 30       	cpi	r24, 0x02	; 2
 32c:	61 f0       	breq	.+24     	; 0x346 <MDIO_u8WriteReg+0x22>
 32e:	18 f4       	brcc	.+6      	; 0x336 <MDIO_u8WriteReg+0x12>
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	31 f0       	breq	.+12     	; 0x340 <MDIO_u8WriteReg+0x1c>
 334:	11 c0       	rjmp	.+34     	; 0x358 <MDIO_u8WriteReg+0x34>
 336:	83 30       	cpi	r24, 0x03	; 3
 338:	49 f0       	breq	.+18     	; 0x34c <MDIO_u8WriteReg+0x28>
 33a:	84 30       	cpi	r24, 0x04	; 4
 33c:	51 f0       	breq	.+20     	; 0x352 <MDIO_u8WriteReg+0x2e>
 33e:	0c c0       	rjmp	.+24     	; 0x358 <MDIO_u8WriteReg+0x34>
	{
		/*Set PORTx register value with inputed Reg value (Local_u8RegValue)*/
		case MDIO_PORTA : {DIO_PORTA = Local_u8RegValue; return 0;}  break;
 340:	6b bb       	out	0x1b, r22	; 27
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	08 95       	ret
		case MDIO_PORTB : {DIO_PORTB = Local_u8RegValue; return 0;}  break;
 346:	68 bb       	out	0x18, r22	; 24
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 95       	ret
		case MDIO_PORTC : {DIO_PORTC = Local_u8RegValue; return 0;}  break;
 34c:	65 bb       	out	0x15, r22	; 21
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret
		case MDIO_PORTD : {DIO_PORTD = Local_u8RegValue; return 0;}  break;
 352:	62 bb       	out	0x12, r22	; 18
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	08 95       	ret
		default         : return 1;   /*error Undefined Port*/
 358:	81 e0       	ldi	r24, 0x01	; 1

	}/*end of register switch case*/

}/*end of MDIO_u8WriteReg()*/
 35a:	08 95       	ret

0000035c <MDIO_u8WriteBit>:
 */
u8 MDIO_u8WriteBit(u8 Copy_u8Reg,u8 Copy_u8Bit,u8 Copy_u8Value)
{

	/*bit number check condition*/
	if( (Copy_u8Bit >= 0) && (Copy_u8Bit < 8) )
 35c:	68 30       	cpi	r22, 0x08	; 8
 35e:	08 f0       	brcs	.+2      	; 0x362 <MDIO_u8WriteBit+0x6>
 360:	7b c0       	rjmp	.+246    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
	{
		/*Register value check condition*/
		if ((0 == Copy_u8Value) || (1 == Copy_u8Value))
 362:	42 30       	cpi	r20, 0x02	; 2
 364:	08 f0       	brcs	.+2      	; 0x368 <MDIO_u8WriteBit+0xc>
 366:	7a c0       	rjmp	.+244    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		{
			/*register switch case*/
			switch (Copy_u8Reg)
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	29 f1       	breq	.+74     	; 0x3b6 <MDIO_u8WriteBit+0x5a>
 36c:	18 f4       	brcc	.+6      	; 0x374 <MDIO_u8WriteBit+0x18>
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	39 f0       	breq	.+14     	; 0x380 <MDIO_u8WriteBit+0x24>
 372:	76 c0       	rjmp	.+236    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 374:	83 30       	cpi	r24, 0x03	; 3
 376:	d1 f1       	breq	.+116    	; 0x3ec <MDIO_u8WriteBit+0x90>
 378:	84 30       	cpi	r24, 0x04	; 4
 37a:	09 f4       	brne	.+2      	; 0x37e <MDIO_u8WriteBit+0x22>
 37c:	52 c0       	rjmp	.+164    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 37e:	70 c0       	rjmp	.+224    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
			{
				/*set bit corresponding PORTx reg value with inputed bit value(Copy_u8Value)*/
				case MDIO_PORTA : {L_UTILS_SET_BIT_VALUE(DIO_PORTA,Copy_u8Bit,Copy_u8Value); return 0;} break;
 380:	41 11       	cpse	r20, r1
 382:	0d c0       	rjmp	.+26     	; 0x39e <MDIO_u8WriteBit+0x42>
 384:	2b b3       	in	r18, 0x1b	; 27
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <MDIO_u8WriteBit+0x34>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <MDIO_u8WriteBit+0x30>
 394:	80 95       	com	r24
 396:	82 23       	and	r24, r18
 398:	8b bb       	out	0x1b, r24	; 27
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	08 95       	ret
 39e:	2b b3       	in	r18, 0x1b	; 27
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <MDIO_u8WriteBit+0x4e>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <MDIO_u8WriteBit+0x4a>
 3ae:	82 2b       	or	r24, r18
 3b0:	8b bb       	out	0x1b, r24	; 27
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	08 95       	ret
				case MDIO_PORTB : {L_UTILS_SET_BIT_VALUE(DIO_PORTB,Copy_u8Bit,Copy_u8Value); return 0;} break;
 3b6:	41 11       	cpse	r20, r1
 3b8:	0d c0       	rjmp	.+26     	; 0x3d4 <MDIO_u8WriteBit+0x78>
 3ba:	28 b3       	in	r18, 0x18	; 24
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <MDIO_u8WriteBit+0x6a>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	6a 95       	dec	r22
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <MDIO_u8WriteBit+0x66>
 3ca:	80 95       	com	r24
 3cc:	82 23       	and	r24, r18
 3ce:	88 bb       	out	0x18, r24	; 24
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	08 95       	ret
 3d4:	28 b3       	in	r18, 0x18	; 24
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <MDIO_u8WriteBit+0x84>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <MDIO_u8WriteBit+0x80>
 3e4:	82 2b       	or	r24, r18
 3e6:	88 bb       	out	0x18, r24	; 24
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	08 95       	ret
				case MDIO_PORTC : {L_UTILS_SET_BIT_VALUE(DIO_PORTC,Copy_u8Bit,Copy_u8Value); return 0;} break;
 3ec:	41 11       	cpse	r20, r1
 3ee:	0d c0       	rjmp	.+26     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3f0:	25 b3       	in	r18, 0x15	; 21
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <MDIO_u8WriteBit+0xa0>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <MDIO_u8WriteBit+0x9c>
 400:	80 95       	com	r24
 402:	82 23       	and	r24, r18
 404:	85 bb       	out	0x15, r24	; 21
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	08 95       	ret
 40a:	25 b3       	in	r18, 0x15	; 21
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	02 c0       	rjmp	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	6a 95       	dec	r22
 418:	e2 f7       	brpl	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	82 2b       	or	r24, r18
 41c:	85 bb       	out	0x15, r24	; 21
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	08 95       	ret
				case MDIO_PORTD : {L_UTILS_SET_BIT_VALUE(DIO_PORTD,Copy_u8Bit,Copy_u8Value); return 0;} break;
 422:	41 11       	cpse	r20, r1
 424:	0d c0       	rjmp	.+26     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 426:	22 b3       	in	r18, 0x12	; 18
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 436:	80 95       	com	r24
 438:	82 23       	and	r24, r18
 43a:	82 bb       	out	0x12, r24	; 18
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret
 440:	22 b3       	in	r18, 0x12	; 18
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	6a 95       	dec	r22
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 450:	82 2b       	or	r24, r18
 452:	82 bb       	out	0x12, r24	; 18
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	08 95       	ret
		}/*end of Register value check condition*/
	}
	else
	{
		/*Report Bit number out of range error*/
		return 2; 
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	08 95       	ret
			}/*end of Register switch case*/	
		} 
		else
		{
			/*Report Register value out of range error*/
			return 3; 
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	08 95       	ret
				/*set bit corresponding PORTx reg value with inputed bit value(Copy_u8Value)*/
				case MDIO_PORTA : {L_UTILS_SET_BIT_VALUE(DIO_PORTA,Copy_u8Bit,Copy_u8Value); return 0;} break;
				case MDIO_PORTB : {L_UTILS_SET_BIT_VALUE(DIO_PORTB,Copy_u8Bit,Copy_u8Value); return 0;} break;
				case MDIO_PORTC : {L_UTILS_SET_BIT_VALUE(DIO_PORTC,Copy_u8Bit,Copy_u8Value); return 0;} break;
				case MDIO_PORTD : {L_UTILS_SET_BIT_VALUE(DIO_PORTD,Copy_u8Bit,Copy_u8Value); return 0;} break;
				default         : return 1; /*error Undefined Port*/
 460:	81 e0       	ldi	r24, 0x01	; 1
		/*Report Bit number out of range error*/
		return 2; 

	}/*end of bit number check condition*/

}/*end of MDIO_u8WriteBit()*/
 462:	08 95       	ret

00000464 <_exit>:
 464:	f8 94       	cli

00000466 <__stop_program>:
 466:	ff cf       	rjmp	.-2      	; 0x466 <__stop_program>
